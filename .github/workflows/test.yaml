name: Test Parameter Values

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-parameters:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Test parameter values
      run: |
        chmod +x ./start.sh
        
        echo "Running test with parameters..."
        OUTPUT=$(./start.sh -g true -s false -m standalone -h "mongodb://user:pass@host" -l "my-license" -j "-Xms512m -Xmx2g" -c 60 -e 70 -a turn.example -n turn -w turn_password -t true)
        
        if ! echo "$OUTPUT" | grep -q "=== TEST MODE: Parameters successfully parsed ==="; then
          echo "Error: Test mode output not found"
          exit 1
        fi
        
        declare -A EXPECTED_VALUES=(
          ["USE_GLOBAL_IP"]="true"
          ["USE_PUBLIC_IP_AS_SERVER_NAME"]="false"
          ["REPLACE_CANDIDATE_ADDRESS_WITH_SERVER_NAME"]="false"
          ["SERVER_MODE"]="standalone"
          ["DB_URL"]="mongodb://user:pass@host"
          ["LICENSE_KEY"]="my-license"
          ["TURN_URL"]="turn.example"
          ["TURN_USERNAME"]="turn"
          ["TURN_PASSWORD"]="turn_password"
          ["KAFKA_URL"]=""
          ["JVM_MEMORY_OPTIONS"]="-Xms512m -Xmx2g"
          ["CPU_LIMIT"]="60"
          ["MEMORY_LIMIT"]="70"
        )
        
        FAILED=0
        for param in "${!EXPECTED_VALUES[@]}"; do
          EXPECTED="${EXPECTED_VALUES[$param]}"
          ACTUAL=$(echo "$OUTPUT" | grep "^$param=" | cut -d'=' -f2)
          
          echo "Checking $param:"
          echo "  Expected: '$EXPECTED'"
          echo "  Actual:   '$ACTUAL'"
          
          if [ "$ACTUAL" != "$EXPECTED" ]; then
            echo " Parameter $param has incorrect value"
            echo "   Expected: '$EXPECTED'"
            echo "   Actual:   '$ACTUAL'"
            FAILED=1
          else
            echo " Parameter $param has correct value"
          fi
          echo "---"
        done
        
        if [ $FAILED -eq 1 ]; then
          echo "Some parameters had incorrect values"
          echo "Full output:"
          echo "$OUTPUT"
          exit 1
        fi
        
        echo " All parameters have correct values!"
